name: Test CLI Build

on:
  pull_request:
    paths:
      - "packages/cli/**"
      - "packages/agents/**"
      - "packages/logger/**"
      - "packages/server/**"
      - "packages/settings/**"
      - "package.json"
      - "bun.lock"
      - "turbo.json"
  workflow_dispatch:

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: |
          # Run tests for CLI and its dependencies
          bunx turbo test --filter=chara
          bunx turbo test --filter=@chara/agents
          bunx turbo test --filter=@chara/logger
          bunx turbo test --filter=@chara/server
          bunx turbo test --filter=@chara/settings

      - name: Build CLI and dependencies
        run: |
          # Use turbo to build CLI and all its dependencies
          bunx turbo build --filter=chara

      - name: Test CLI build
        run: |
          cd packages/cli
          # Verify the binary was created
          if [ ! -f "./dist/chara" ]; then
            echo "Error: CLI binary not found at ./dist/chara"
            exit 1
          fi
          # Test that the binary is executable
          chmod +x ./dist/chara
          # Test basic functionality
          ./dist/chara --help
          ./dist/chara --version

      - name: Test package contents
        run: |
          cd packages/cli
          # Create a clean package.json for testing (remove workspace deps)
          node -e "
            const pkg = require('./package.json');
            const fs = require('fs');

            // Create a backup
            fs.writeFileSync('./package.json.backup', JSON.stringify(pkg, null, 2));

            // Remove workspace dependencies from dependencies and devDependencies
            if (pkg.dependencies) {
              Object.keys(pkg.dependencies).forEach(key => {
                if (key.startsWith('@chara/')) {
                  delete pkg.dependencies[key];
                }
              });
            }

            if (pkg.devDependencies) {
              Object.keys(pkg.devDependencies).forEach(key => {
                if (key.startsWith('@chara/')) {
                  delete pkg.devDependencies[key];
                }
              });
            }

            // Write the cleaned package.json
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Package.json cleaned for testing');
          "
          # Test npm pack to ensure all files are included
          npm pack --dry-run
          # Verify package.json is valid
          npm run prepack
          # Check that all required files are present
          for file in "dist/chara" "README.md" "LICENSE"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done
          # Restore original package.json
          if [ -f "package.json.backup" ]; then
            mv package.json.backup package.json
            echo "Package.json restored from backup"
          fi

      - name: Validate package.json
        run: |
          cd packages/cli
          # Check that package.json has required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'bin', 'files'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('Missing required fields:', missing);
              process.exit(1);
            }
            if (pkg.name !== 'chara') {
              console.error('Package name should be \"chara\"');
              process.exit(1);
            }
            if (pkg.bin.chara !== './dist/chara') {
              console.error('Binary path should be \"./dist/chara\"');
              process.exit(1);
            }
            // Check that workspace dependencies are in devDependencies, not dependencies
            if (pkg.dependencies) {
              const workspaceDeps = Object.keys(pkg.dependencies).filter(key => key.startsWith('@chara/'));
              if (workspaceDeps.length > 0) {
                console.error('Workspace dependencies should not be in dependencies:', workspaceDeps);
                process.exit(1);
              }
            }
            console.log('Package.json validation passed');
          "

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CLI Build Test')
            );

            const commentBody = `## ✅ CLI Build Test Results

            The CLI package build and tests have passed successfully!

            - ✅ Dependencies installed
            - ✅ All tests passed
            - ✅ CLI binary built successfully
            - ✅ CLI binary is executable
            - ✅ Package contents validated
            - ✅ Package.json validated

            The CLI is ready for publishing once this PR is merged.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
